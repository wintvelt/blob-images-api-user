# NOTE: update this with your service name
service: blob-images-api-user

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-domain-manager

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  tags:
    APP: clubalmanac

  environment:
    photoTable: blob-images-photos-${self:provider.stage}
    coverIndex: cover-idx
    photoIndex: SK-PK-idx
    emailIndex: email-idx
    cognitoIndex: cog-idx
    dateIndex: date-idx
    photoBucket: blob-images

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:eu-central-1:*:*"
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
        - ses:SendTemplatedEmail
        - ses:SendBulkTemplatedEmail
      Resource: "arn:aws:ses:eu-central-1:*:*"
    - Effect: Allow
      Action:
        - s3:getObject
      Resource: "arn:aws:s3:::*"

functions:
  createUser:
    handler: handlersUser/createUser.main
    # events:
    #   - cognitoUserPool:
    #       pool: blob-images-users
    #       trigger: PostConfirmation
    #       existing: true
  getUser:
    handler: handlersUser/getUser.main
    events:
      - http:
          path: /
          method: get
          cors: true
          authorizer: aws_iam
  updateUser:
    handler: handlersUser/updateUser.main
    events:
      - http:
          path: /
          method: put
          cors: true
          authorizer: aws_iam
  listUserAlbums:
    handler: handlersUser/listAllAlbums.main
    events:
      - http:
          path: /albums
          method: get
          cors: true
          authorizer: aws_iam
  dummy:
    handler: handlersUser/dummy.main
    events:
      - http:
          path: /dummy
          method: get

custom:
  customDomain:
    domainName: ${file(./serverlessDomainConfig.js):domain.${self:provider.stage}}
    basePath: 'user'
    stage: ${self:provider.stage}
    createRoute53Record: true

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}